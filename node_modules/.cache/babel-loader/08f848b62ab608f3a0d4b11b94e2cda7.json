{"ast":null,"code":"var _jsxFileName = \"/home/pi/Documents/Ially/alura/reactjs/react-initial/src/App.js\";\nimport './App.css';\nimport { Component } from 'react';\nimport { PostCard } from './components/PostCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      //criando o estado para a classe. O estado corresponde a um objeto que contém os dados do componente que serão renderizados a partir da função render()\n      posts: [] //array de objetos em jsx: utilizamos : e não o sinal = para declarar um array\n\n    };\n\n    this.loadPosts = async () => {\n      const postsResponse = fetch('https://jsonplaceholder.typicode.com/posts'); // usando a fetch api nativa do navegador para fazer requisições\n\n      const photosResponse = fetch('https://jsonplaceholder.typicode.com/photos');\n      const [posts, photos] = await Promise.all([postsResponse, photosResponse]); //retornando um array de promessas\n\n      const postsJson = await posts.json();\n      const photosJson = await photos.json();\n      const postsAndPhotos = postsJson.map((post, index) => {\n        return { ...post,\n          cover: photosJson[index].url\n        };\n      });\n      this.setState({\n        posts: postsAndPhotos\n      });\n    };\n  }\n\n  componentDidMount() {\n    //componente de ciclo de vida. Ele será executado uma vez após o componente ser montado na tela. É um lifecyle method de montagem.Pode ser utilizado para buscar dados de uma API\n    this.loadPosts();\n  }\n\n  render() {\n    //só podemos ter um componente root dentro da página com React. Para adicionar mais um componente, devemos colocá-lo dentro do root\n    //precisamos inserir um Key com uma propriedade única dentro do componente-pai quando estamos utilizando o método .map()\n    const {\n      posts\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"posts\",\n        children: posts.map(post => /*#__PURE__*/_jsxDEV(PostCard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["Component","PostCard","App","state","posts","loadPosts","postsResponse","fetch","photosResponse","photos","Promise","all","postsJson","json","photosJson","postsAndPhotos","map","post","index","cover","url","setState","componentDidMount","render"],"sources":["/home/pi/Documents/Ially/alura/reactjs/react-initial/src/App.js"],"sourcesContent":["import './App.css';\nimport { Component } from 'react';\nimport { PostCard } from './components/PostCard';\n\nclass App extends Component { //componente react. Para escrever um código JavaScript em JSX usamos um par de chaves {} e escrevemos o códgio dentro\n    //é possível criar um componente de estado sem utilizar o constructor\n  state = {  //criando o estado para a classe. O estado corresponde a um objeto que contém os dados do componente que serão renderizados a partir da função render()\n    posts: [] //array de objetos em jsx: utilizamos : e não o sinal = para declarar um array\n  };\n\ncomponentDidMount() { //componente de ciclo de vida. Ele será executado uma vez após o componente ser montado na tela. É um lifecyle method de montagem.Pode ser utilizado para buscar dados de uma API\n  this.loadPosts();\n}\n\nloadPosts = async () => {\n  const postsResponse = fetch('https://jsonplaceholder.typicode.com/posts'); // usando a fetch api nativa do navegador para fazer requisições\n  const photosResponse = fetch('https://jsonplaceholder.typicode.com/photos');\n  const [posts, photos] = await Promise.all([postsResponse, photosResponse]);//retornando um array de promessas\n  const postsJson = await posts.json();\n  const photosJson = await photos.json();\n\n  const postsAndPhotos = postsJson.map((post, index) => {\n    return({...post, cover: photosJson[index].url})\n  })\n  this.setState({ posts: postsAndPhotos });\n}\n\nrender() {\n//só podemos ter um componente root dentro da página com React. Para adicionar mais um componente, devemos colocá-lo dentro do root\n//precisamos inserir um Key com uma propriedade única dentro do componente-pai quando estamos utilizando o método .map()\n    const { posts } = this.state;\n\n    return (\n      <section className='container'>\n        <div className='posts'>\n        {posts.map(post => (\n          <PostCard />\n        ))}\n        </div>\n      </section>\n    );\n  }\n} \n\nexport default App;\n"],"mappings":";AAAA,OAAO,WAAP;AACA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,QAAT,QAAyB,uBAAzB;;;AAEA,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;EAAA;IAAA;IAAA,KAE1BG,KAF0B,GAElB;MAAG;MACTC,KAAK,EAAE,EADD,CACI;;IADJ,CAFkB;;IAAA,KAU5BC,SAV4B,GAUhB,YAAY;MACtB,MAAMC,aAAa,GAAGC,KAAK,CAAC,4CAAD,CAA3B,CADsB,CACqD;;MAC3E,MAAMC,cAAc,GAAGD,KAAK,CAAC,6CAAD,CAA5B;MACA,MAAM,CAACH,KAAD,EAAQK,MAAR,IAAkB,MAAMC,OAAO,CAACC,GAAR,CAAY,CAACL,aAAD,EAAgBE,cAAhB,CAAZ,CAA9B,CAHsB,CAGqD;;MAC3E,MAAMI,SAAS,GAAG,MAAMR,KAAK,CAACS,IAAN,EAAxB;MACA,MAAMC,UAAU,GAAG,MAAML,MAAM,CAACI,IAAP,EAAzB;MAEA,MAAME,cAAc,GAAGH,SAAS,CAACI,GAAV,CAAc,CAACC,IAAD,EAAOC,KAAP,KAAiB;QACpD,OAAO,EAAC,GAAGD,IAAJ;UAAUE,KAAK,EAAEL,UAAU,CAACI,KAAD,CAAV,CAAkBE;QAAnC,CAAP;MACD,CAFsB,CAAvB;MAGA,KAAKC,QAAL,CAAc;QAAEjB,KAAK,EAAEW;MAAT,CAAd;IACD,CArB2B;EAAA;;EAM5BO,iBAAiB,GAAG;IAAE;IACpB,KAAKjB,SAAL;EACD;;EAeDkB,MAAM,GAAG;IACT;IACA;IACI,MAAM;MAAEnB;IAAF,IAAY,KAAKD,KAAvB;IAEA,oBACE;MAAS,SAAS,EAAC,WAAnB;MAAA,uBACE;QAAK,SAAS,EAAC,OAAf;QAAA,UACCC,KAAK,CAACY,GAAN,CAAUC,IAAI,iBACb,QAAC,QAAD;UAAA;UAAA;UAAA;QAAA,QADD;MADD;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADF;EASD;;AArCyB;;AAwC5B,eAAef,GAAf"},"metadata":{},"sourceType":"module"}