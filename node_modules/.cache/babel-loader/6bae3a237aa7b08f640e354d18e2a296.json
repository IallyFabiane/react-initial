{"ast":null,"code":"var _jsxFileName = \"/home/pi/Documents/Ially/alura/reactjs/react-initial/src/App.js\";\nimport './App.css';\nimport { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      //criando o estado para a classe. O estado corresponde a um objeto que contém os dados do componente que serão renderizados a partir da função render()\n      posts: [//array de objetos em jsx: utilizamos : e não o sinal = para declarar um array\n      ]\n    };\n  }\n\n  componentDidMount() {//componente de ciclo de vida. Ele será executado uma vez após o componente ser montado  na tela. É um lifecyle method de montagem\n  }\n\n  componentDidUpdate() {//componente de ciclo de vida. É um lifecycle method de atualização.\n  }\n\n  componentWillUnmount() {//componente de ciclo de vida. É um lifecucle method de deesmontagem.\n    // com o clearTimeOut é realizada a 'limpeza' na tela\n  }\n\n  render() {\n    //só podemos ter um componente root dentro da página com React. Para adicionar mais um componente, devemos colocá-lo dentro do root\n    //precisamos inserir um Key com uma propriedade única dentro do componente-pai quando estamos utilizando o método .map()\n    const {\n      posts\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: post.body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this)]\n      }, post.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["Component","App","state","posts","componentDidMount","componentDidUpdate","componentWillUnmount","render","map","post","title","body","id"],"sources":["/home/pi/Documents/Ially/alura/reactjs/react-initial/src/App.js"],"sourcesContent":["import './App.css';\nimport { Component } from 'react';\n\nclass App extends Component { //componente react. Para escrever um código JavaScript em JSX usamos um par de chaves {} e escrevemos o códgio dentro\n    //é possível criar um componente de estado sem utilizar o constructor\n  state = {  //criando o estado para a classe. O estado corresponde a um objeto que contém os dados do componente que serão renderizados a partir da função render()\n    posts: [ //array de objetos em jsx: utilizamos : e não o sinal = para declarar um array\n  \n  ]\n  };\n\ncomponentDidMount() { //componente de ciclo de vida. Ele será executado uma vez após o componente ser montado  na tela. É um lifecyle method de montagem\n}\n\ncomponentDidUpdate() { //componente de ciclo de vida. É um lifecycle method de atualização.\n}\n\ncomponentWillUnmount() {//componente de ciclo de vida. É um lifecucle method de deesmontagem.\n  // com o clearTimeOut é realizada a 'limpeza' na tela\n}\n\n\nrender() {\n//só podemos ter um componente root dentro da página com React. Para adicionar mais um componente, devemos colocá-lo dentro do root\n//precisamos inserir um Key com uma propriedade única dentro do componente-pai quando estamos utilizando o método .map()\n    const { posts } = this.state;\n\n    return (\n      <div className='App'>\n        {posts.map(post => (\n          <div key={post.id}> \n            <h1>{post.title}</h1>\n            <p>{post.body}</p>\n          </div>\n        ))}\n      </div>\n    );\n  }\n} \n\nexport default App;\n"],"mappings":";AAAA,OAAO,WAAP;AACA,SAASA,SAAT,QAA0B,OAA1B;;;AAEA,MAAMC,GAAN,SAAkBD,SAAlB,CAA4B;EAAA;IAAA;IAAA,KAE1BE,KAF0B,GAElB;MAAG;MACTC,KAAK,EAAE,CAAE;MAAF;IADD,CAFkB;EAAA;;EAQ5BC,iBAAiB,GAAG,CAAE;EACrB;;EAEDC,kBAAkB,GAAG,CAAE;EACtB;;EAEDC,oBAAoB,GAAG,CAAC;IACtB;EACD;;EAGDC,MAAM,GAAG;IACT;IACA;IACI,MAAM;MAAEJ;IAAF,IAAY,KAAKD,KAAvB;IAEA,oBACE;MAAK,SAAS,EAAC,KAAf;MAAA,UACGC,KAAK,CAACK,GAAN,CAAUC,IAAI,iBACb;QAAA,wBACE;UAAA,UAAKA,IAAI,CAACC;QAAV;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UAAA,UAAID,IAAI,CAACE;QAAT;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA,GAAUF,IAAI,CAACG,EAAf;QAAA;QAAA;QAAA;MAAA,QADD;IADH;MAAA;MAAA;MAAA;IAAA,QADF;EAUD;;AAlCyB;;AAqC5B,eAAeX,GAAf"},"metadata":{},"sourceType":"module"}