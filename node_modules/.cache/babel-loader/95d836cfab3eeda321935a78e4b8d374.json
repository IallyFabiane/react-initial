{"ast":null,"code":"var _jsxFileName = \"/home/pi/Documents/Ially/alura/reactjs/react-initial/src/App.js\";\nimport './App.css';\nimport { Component } from 'react';\nimport { PostCard } from './components/PostCard/';\nimport { loadPosts } from './utils/load-posts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      //criando o estado para a classe. O estado corresponde a um objeto que contém os dados do componente que serão renderizados a partir da função render()\n      posts: [] //array de objetos em jsx: utilizamos : e não o sinal = para declarar um array\n\n    };\n\n    this.loadPosts = async () => {\n      const postsAndPhotos = await loadPosts();\n      this.setState({\n        posts: postsAndPhotos\n      });\n    };\n  }\n\n  async componentDidMount() {\n    //componente de ciclo de vida. Ele será executado uma vez após o componente ser montado na tela. É um lifecyle method de montagem.Pode ser utilizado para buscar dados de uma API\n    await this.loadPosts();\n  }\n\n  render() {\n    //só podemos ter um componente root dentro da página com React. Para adicionar mais um componente, devemos colocá-lo dentro do root\n    //precisamos inserir um Key com uma propriedade única dentro do componente-pai quando estamos utilizando o método .map()\n    const {\n      posts\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"posts\",\n        children: posts.map(post => /*#__PURE__*/_jsxDEV(PostCard, {\n          title: post.title,\n          body: post.body,\n          id: post.id,\n          cover: post.cover\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["Component","PostCard","loadPosts","App","state","posts","postsAndPhotos","setState","componentDidMount","render","map","post","title","body","id","cover"],"sources":["/home/pi/Documents/Ially/alura/reactjs/react-initial/src/App.js"],"sourcesContent":["import './App.css';\nimport { Component } from 'react';\nimport { PostCard } from './components/PostCard/';\nimport { loadPosts } from './utils/load-posts'\n\nclass App extends Component { //componente react. Para escrever um código JavaScript em JSX usamos um par de chaves {} e escrevemos o códgio dentro\n    //é possível criar um componente de estado sem utilizar o constructor\n  state = {  //criando o estado para a classe. O estado corresponde a um objeto que contém os dados do componente que serão renderizados a partir da função render()\n    posts: [] //array de objetos em jsx: utilizamos : e não o sinal = para declarar um array\n  };\n\nasync componentDidMount() { //componente de ciclo de vida. Ele será executado uma vez após o componente ser montado na tela. É um lifecyle method de montagem.Pode ser utilizado para buscar dados de uma API\n  await this.loadPosts();\n}\n\nloadPosts = async () => {\n  const postsAndPhotos = await loadPosts();\n  this.setState({ posts: postsAndPhotos });\n}\n\nrender() {\n//só podemos ter um componente root dentro da página com React. Para adicionar mais um componente, devemos colocá-lo dentro do root\n//precisamos inserir um Key com uma propriedade única dentro do componente-pai quando estamos utilizando o método .map()\n    const { posts } = this.state;\n\n    return (\n      <section className='container'>\n        <div className='posts'>\n        {posts.map(post => (\n          <PostCard \n          key={post.id}\n          title={post.title} \n          body={post.body}\n          id={post.id}\n          cover={post.cover}\n          />\n        ))}\n        </div>\n      </section>\n    );\n  }\n} \n\nexport default App;\n"],"mappings":";AAAA,OAAO,WAAP;AACA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,SAAT,QAA0B,oBAA1B;;;AAEA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;EAAA;IAAA;IAAA,KAE1BI,KAF0B,GAElB;MAAG;MACTC,KAAK,EAAE,EADD,CACI;;IADJ,CAFkB;;IAAA,KAU5BH,SAV4B,GAUhB,YAAY;MACtB,MAAMI,cAAc,GAAG,MAAMJ,SAAS,EAAtC;MACA,KAAKK,QAAL,CAAc;QAAEF,KAAK,EAAEC;MAAT,CAAd;IACD,CAb2B;EAAA;;EAML,MAAjBE,iBAAiB,GAAG;IAAE;IAC1B,MAAM,KAAKN,SAAL,EAAN;EACD;;EAODO,MAAM,GAAG;IACT;IACA;IACI,MAAM;MAAEJ;IAAF,IAAY,KAAKD,KAAvB;IAEA,oBACE;MAAS,SAAS,EAAC,WAAnB;MAAA,uBACE;QAAK,SAAS,EAAC,OAAf;QAAA,UACCC,KAAK,CAACK,GAAN,CAAUC,IAAI,iBACb,QAAC,QAAD;UAEA,KAAK,EAAEA,IAAI,CAACC,KAFZ;UAGA,IAAI,EAAED,IAAI,CAACE,IAHX;UAIA,EAAE,EAAEF,IAAI,CAACG,EAJT;UAKA,KAAK,EAAEH,IAAI,CAACI;QALZ,GACKJ,IAAI,CAACG,EADV;UAAA;UAAA;UAAA;QAAA,QADD;MADD;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADF;EAeD;;AAnCyB;;AAsC5B,eAAeX,GAAf"},"metadata":{},"sourceType":"module"}