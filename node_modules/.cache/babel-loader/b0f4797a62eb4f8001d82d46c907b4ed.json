{"ast":null,"code":"var _jsxFileName = \"/home/pi/Documents/Ially/alura/reactjs/react-initial/src/App.js\";\nimport './App.css';\nimport { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      //criando o estado para a classe. O estado corresponde a um objeto que contém os dados do componente que serão renderizados a partir da função render()\n      counter: 0,\n      posts: [//array de objetos em jsx: utilizamos : e não o sinal = para declarar um array\n      {\n        id: 1,\n        title: 'título 1',\n        body: 'corpo 1'\n      }, {\n        id: 2,\n        title: 'título 2',\n        body: 'corpo 2'\n      }, {\n        id: 3,\n        title: 'título 3',\n        body: 'corpo 3'\n      }]\n    };\n    this.timeOutUpdate = null;\n\n    this.handleTimeOut = () => {\n      const {\n        posts,\n        counter\n      } = this.state;\n      posts[0].title = 'O título mudou';\n      this.timeOutUpdate = setTimeout(() => {\n        this.setState({\n          posts,\n          counter: counter + 1\n        });\n      }, 3000);\n    };\n  }\n\n  componentDidMount() {\n    //componente de ciclo de vida. Ele será executado uma vez após o componente ser montado  na tela. É um lifecyle method de montagem\n    this.handleTimeOut();\n  }\n\n  componentDidUpdate() {\n    //componente de ciclo de vida. É um lifecycle method de atualização\n    clearTimeout();\n  }\n\n  render() {\n    //só podemos ter um componente root dentro da página com React. Para adicionar mais um componente, devemos colocá-lo dentro do root\n    //precisamos inserir um Key com uma propriedade única dentro do componente-pai quando estamos utilizando o método .map()\n    const {\n      posts,\n      counter\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: counter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: post.body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)]\n      }, post.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["Component","App","state","counter","posts","id","title","body","timeOutUpdate","handleTimeOut","setTimeout","setState","componentDidMount","componentDidUpdate","clearTimeout","render","map","post"],"sources":["/home/pi/Documents/Ially/alura/reactjs/react-initial/src/App.js"],"sourcesContent":["import './App.css';\nimport { Component } from 'react';\n\nclass App extends Component { //componente react. Para escrever um código JavaScript em JSX usamos um par de chaves {} e escrevemos o códgio dentro\n    //é possível criar um componente de estado sem utilizar o constructor\n  state = {  //criando o estado para a classe. O estado corresponde a um objeto que contém os dados do componente que serão renderizados a partir da função render()\n    counter: 0,\n    posts: [ //array de objetos em jsx: utilizamos : e não o sinal = para declarar um array\n    {\n      id: 1,\n      title: 'título 1',\n      body: 'corpo 1'\n    },\n    {\n      id: 2,\n      title: 'título 2',\n      body: 'corpo 2'\n    },\n    {\n      id: 3,\n      title: 'título 3',\n      body: 'corpo 3'\n    }\n  ]\n  };\n\ntimeOutUpdate = null;\n\ncomponentDidMount() { //componente de ciclo de vida. Ele será executado uma vez após o componente ser montado  na tela. É um lifecyle method de montagem\n    this.handleTimeOut();\n}\n\ncomponentDidUpdate() { //componente de ciclo de vida. É um lifecycle method de atualização\n  clearTimeout()\n}\n\nhandleTimeOut = () => {\n    const { posts, counter } = this.state\n    posts[0].title = 'O título mudou';\n\n    this.timeOutUpdate = setTimeout(() => {\n      this.setState({ posts, counter: counter + 1 });\n    }, 3000);\n}\n\nrender() {\n//só podemos ter um componente root dentro da página com React. Para adicionar mais um componente, devemos colocá-lo dentro do root\n//precisamos inserir um Key com uma propriedade única dentro do componente-pai quando estamos utilizando o método .map()\n    const { posts, counter } = this.state;\n\n    return (\n      <div className='App'>\n        <h2>{counter}</h2>\n        {posts.map(post => (\n          <div key={post.id}> \n            <h1>{post.title}</h1>\n            <p>{post.body}</p>\n          </div>\n        ))}\n      </div>\n    );\n  }\n} \n\nexport default App;\n"],"mappings":";AAAA,OAAO,WAAP;AACA,SAASA,SAAT,QAA0B,OAA1B;;;AAEA,MAAMC,GAAN,SAAkBD,SAAlB,CAA4B;EAAA;IAAA;IAAA,KAE1BE,KAF0B,GAElB;MAAG;MACTC,OAAO,EAAE,CADH;MAENC,KAAK,EAAE,CAAE;MACT;QACEC,EAAE,EAAE,CADN;QAEEC,KAAK,EAAE,UAFT;QAGEC,IAAI,EAAE;MAHR,CADO,EAMP;QACEF,EAAE,EAAE,CADN;QAEEC,KAAK,EAAE,UAFT;QAGEC,IAAI,EAAE;MAHR,CANO,EAWP;QACEF,EAAE,EAAE,CADN;QAEEC,KAAK,EAAE,UAFT;QAGEC,IAAI,EAAE;MAHR,CAXO;IAFD,CAFkB;IAAA,KAuB5BC,aAvB4B,GAuBZ,IAvBY;;IAAA,KAiC5BC,aAjC4B,GAiCZ,MAAM;MAClB,MAAM;QAAEL,KAAF;QAASD;MAAT,IAAqB,KAAKD,KAAhC;MACAE,KAAK,CAAC,CAAD,CAAL,CAASE,KAAT,GAAiB,gBAAjB;MAEA,KAAKE,aAAL,GAAqBE,UAAU,CAAC,MAAM;QACpC,KAAKC,QAAL,CAAc;UAAEP,KAAF;UAASD,OAAO,EAAEA,OAAO,GAAG;QAA5B,CAAd;MACD,CAF8B,EAE5B,IAF4B,CAA/B;IAGH,CAxC2B;EAAA;;EAyB5BS,iBAAiB,GAAG;IAAE;IAClB,KAAKH,aAAL;EACH;;EAEDI,kBAAkB,GAAG;IAAE;IACrBC,YAAY;EACb;;EAWDC,MAAM,GAAG;IACT;IACA;IACI,MAAM;MAAEX,KAAF;MAASD;IAAT,IAAqB,KAAKD,KAAhC;IAEA,oBACE;MAAK,SAAS,EAAC,KAAf;MAAA,wBACE;QAAA,UAAKC;MAAL;QAAA;QAAA;QAAA;MAAA,QADF,EAEGC,KAAK,CAACY,GAAN,CAAUC,IAAI,iBACb;QAAA,wBACE;UAAA,UAAKA,IAAI,CAACX;QAAV;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UAAA,UAAIW,IAAI,CAACV;QAAT;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA,GAAUU,IAAI,CAACZ,EAAf;QAAA;QAAA;QAAA;MAAA,QADD,CAFH;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAWD;;AA1DyB;;AA6D5B,eAAeJ,GAAf"},"metadata":{},"sourceType":"module"}