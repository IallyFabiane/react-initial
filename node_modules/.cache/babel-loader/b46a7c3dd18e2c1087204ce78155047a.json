{"ast":null,"code":"var _jsxFileName = \"/home/pi/Documents/Ially/alura/reactjs/react-initial/src/templates/Home/index.jsx\";\nimport './styles.css';\nimport { Component } from 'react';\nimport { loadPosts } from '../../utils/load-posts';\nimport { Posts } from '../../components/Posts';\nimport { Button } from '../../components/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Home extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      //criando o estado para a classe. O estado corresponde a um objeto que contém os dados do componente que serão renderizados a partir da função render()\n      posts: [],\n      //array de objetos em jsx: utilizamos : e não o sinal = para declarar um array\n      allPosts: [],\n      page: 0,\n      postsPerPage: 2,\n      searchValue: ''\n    };\n\n    this.loadPosts = async () => {\n      const {\n        page,\n        postsPerPage\n      } = this.state;\n      const postsAndPhotos = await loadPosts();\n      this.setState({\n        posts: postsAndPhotos.slice(page, postsPerPage),\n        allPosts: postsAndPhotos\n      });\n    };\n\n    this.loadMorePosts = () => {\n      const {\n        page,\n        postsPerPage,\n        allPosts,\n        posts\n      } = this.state;\n      const nextPage = posts + postsPerPage;\n      const nextPosts = allPosts.slice(nextPage, nextPage + postsPerPage);\n      posts.push(...nextPosts);\n      this.setState({\n        posts,\n        page: nextPage\n      });\n    };\n\n    this.handleChange = e => {\n      const {\n        value\n      } = e.target;\n      this.setState({\n        searchValue: value\n      });\n    };\n  }\n\n  async componentDidMount() {\n    //componente de ciclo de vida. Ele será executado uma vez após o componente ser montado na tela. É um lifecyle method de montagem.Pode ser utilizado para buscar dados de uma API\n    await this.loadPosts();\n  }\n\n  render() {\n    //só podemos ter um componente root dentro da página com React. Para adicionar mais um componente, devemos colocá-lo dentro do root\n    //precisamos inserir um Key com uma propriedade única dentro do componente-pai quando estamos utilizando o método .map()\n    const {\n      posts,\n      page,\n      postsPerPage,\n      allPosts,\n      searchValue\n    } = this.state;\n    const noMorePosts = page + postsPerPage >= allPosts.length;\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"container\",\n      children: [!!searchValue && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Search value: \", searchValue]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 49\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"search\",\n        value: searchValue,\n        onChange: this.handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 12\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(Posts, {\n        posts: posts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: !searchValue && /*#__PURE__*/_jsxDEV(Button, {\n          disabled: noMorePosts,\n          text: \"Load more posts\",\n          onClick: this.loadMorePosts\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Home;","map":{"version":3,"names":["Component","loadPosts","Posts","Button","Home","state","posts","allPosts","page","postsPerPage","searchValue","postsAndPhotos","setState","slice","loadMorePosts","nextPage","nextPosts","push","handleChange","e","value","target","componentDidMount","render","noMorePosts","length"],"sources":["/home/pi/Documents/Ially/alura/reactjs/react-initial/src/templates/Home/index.jsx"],"sourcesContent":["import './styles.css';\nimport { Component } from 'react';\nimport { loadPosts } from '../../utils/load-posts'\nimport { Posts } from '../../components/Posts';\nimport { Button } from '../../components/Button'\n\nclass Home extends Component { //componente react. Para escrever um código JavaScript em JSX usamos um par de chaves {} e escrevemos o códgio dentro\n    //é possível criar um componente de estado sem utilizar o constructor\n  state = {  //criando o estado para a classe. O estado corresponde a um objeto que contém os dados do componente que serão renderizados a partir da função render()\n    posts: [], //array de objetos em jsx: utilizamos : e não o sinal = para declarar um array\n    allPosts: [],\n    page: 0,\n    postsPerPage: 2,\n    searchValue:''\n  };\n\nasync componentDidMount() { //componente de ciclo de vida. Ele será executado uma vez após o componente ser montado na tela. É um lifecyle method de montagem.Pode ser utilizado para buscar dados de uma API\n  await this.loadPosts();\n}\n\nloadPosts = async () => {\n  const { page, postsPerPage } = this.state\n  const postsAndPhotos = await loadPosts();\n  this.setState({ \n    posts: postsAndPhotos.slice(page, postsPerPage),\n    allPosts: postsAndPhotos\n  });\n}\n\nloadMorePosts = () => {\n  const {\n   page,\n   postsPerPage,\n   allPosts,\n   posts\n  } = this.state\n\n  const nextPage = posts + postsPerPage;\n  const nextPosts= allPosts.slice(nextPage, nextPage + postsPerPage)\n  posts.push(...nextPosts);\n\n  this.setState({ posts, page: nextPage})\n}\n\nhandleChange = (e) => {\n  const {value} = e.target;\n  this.setState({ searchValue: value })\n}\n\nrender() {\n//só podemos ter um componente root dentro da página com React. Para adicionar mais um componente, devemos colocá-lo dentro do root\n//precisamos inserir um Key com uma propriedade única dentro do componente-pai quando estamos utilizando o método .map()\n    const { posts, page, postsPerPage, allPosts, searchValue} = this.state;\n    const noMorePosts = page + postsPerPage >= allPosts.length;\n\n    return (\n      <section className='container'> \n        {!!searchValue && (\n          <div>\n            <h1>Search value: {searchValue}</h1><br></br>\n          </div>\n        )} \n        <input type=\"search\" \n        value={searchValue}\n        onChange={this.handleChange}\n        /> <br /> <br />\n        <Posts posts={posts} />\n        <div className='button-container'>\n        {!searchValue && (\n            <Button\n            disabled={noMorePosts}\n            text=\"Load more posts\"\n            onClick={this.loadMorePosts}\n            />\n        )}\n          \n        </div>\n      </section>\n    );\n  }\n} \n\nexport default Home;\n"],"mappings":";AAAA,OAAO,cAAP;AACA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,KAAT,QAAsB,wBAAtB;AACA,SAASC,MAAT,QAAuB,yBAAvB;;;AAEA,MAAMC,IAAN,SAAmBJ,SAAnB,CAA6B;EAAA;IAAA;IAAA,KAE3BK,KAF2B,GAEnB;MAAG;MACTC,KAAK,EAAE,EADD;MACK;MACXC,QAAQ,EAAE,EAFJ;MAGNC,IAAI,EAAE,CAHA;MAINC,YAAY,EAAE,CAJR;MAKNC,WAAW,EAAC;IALN,CAFmB;;IAAA,KAc7BT,SAd6B,GAcjB,YAAY;MACtB,MAAM;QAAEO,IAAF;QAAQC;MAAR,IAAyB,KAAKJ,KAApC;MACA,MAAMM,cAAc,GAAG,MAAMV,SAAS,EAAtC;MACA,KAAKW,QAAL,CAAc;QACZN,KAAK,EAAEK,cAAc,CAACE,KAAf,CAAqBL,IAArB,EAA2BC,YAA3B,CADK;QAEZF,QAAQ,EAAEI;MAFE,CAAd;IAID,CArB4B;;IAAA,KAuB7BG,aAvB6B,GAuBb,MAAM;MACpB,MAAM;QACLN,IADK;QAELC,YAFK;QAGLF,QAHK;QAILD;MAJK,IAKF,KAAKD,KALT;MAOA,MAAMU,QAAQ,GAAGT,KAAK,GAAGG,YAAzB;MACA,MAAMO,SAAS,GAAET,QAAQ,CAACM,KAAT,CAAeE,QAAf,EAAyBA,QAAQ,GAAGN,YAApC,CAAjB;MACAH,KAAK,CAACW,IAAN,CAAW,GAAGD,SAAd;MAEA,KAAKJ,QAAL,CAAc;QAAEN,KAAF;QAASE,IAAI,EAAEO;MAAf,CAAd;IACD,CApC4B;;IAAA,KAsC7BG,YAtC6B,GAsCbC,CAAD,IAAO;MACpB,MAAM;QAACC;MAAD,IAAUD,CAAC,CAACE,MAAlB;MACA,KAAKT,QAAL,CAAc;QAAEF,WAAW,EAAEU;MAAf,CAAd;IACD,CAzC4B;EAAA;;EAUN,MAAjBE,iBAAiB,GAAG;IAAE;IAC1B,MAAM,KAAKrB,SAAL,EAAN;EACD;;EA+BDsB,MAAM,GAAG;IACT;IACA;IACI,MAAM;MAAEjB,KAAF;MAASE,IAAT;MAAeC,YAAf;MAA6BF,QAA7B;MAAuCG;IAAvC,IAAsD,KAAKL,KAAjE;IACA,MAAMmB,WAAW,GAAGhB,IAAI,GAAGC,YAAP,IAAuBF,QAAQ,CAACkB,MAApD;IAEA,oBACE;MAAS,SAAS,EAAC,WAAnB;MAAA,WACG,CAAC,CAACf,WAAF,iBACC;QAAA,wBACE;UAAA,6BAAmBA,WAAnB;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eACsC;UAAA;UAAA;UAAA;QAAA,QADtC;MAAA;QAAA;QAAA;QAAA;MAAA,QAFJ,eAME;QAAO,IAAI,EAAC,QAAZ;QACA,KAAK,EAAEA,WADP;QAEA,QAAQ,EAAE,KAAKQ;MAFf;QAAA;QAAA;QAAA;MAAA,QANF,oBASK;QAAA;QAAA;QAAA;MAAA,QATL,oBASY;QAAA;QAAA;QAAA;MAAA,QATZ,eAUE,QAAC,KAAD;QAAO,KAAK,EAAEZ;MAAd;QAAA;QAAA;QAAA;MAAA,QAVF,eAWE;QAAK,SAAS,EAAC,kBAAf;QAAA,UACC,CAACI,WAAD,iBACG,QAAC,MAAD;UACA,QAAQ,EAAEc,WADV;UAEA,IAAI,EAAC,iBAFL;UAGA,OAAO,EAAE,KAAKV;QAHd;UAAA;UAAA;UAAA;QAAA;MAFJ;QAAA;QAAA;QAAA;MAAA,QAXF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAwBD;;AAzE0B;;AA4E7B,eAAeV,IAAf"},"metadata":{},"sourceType":"module"}