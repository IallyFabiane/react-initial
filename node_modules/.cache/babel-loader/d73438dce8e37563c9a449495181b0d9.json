{"ast":null,"code":"var _jsxFileName = \"/home/pi/Documents/Ially/alura/reactjs/react-initial/src/App.js\";\nimport './App.css';\nimport { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      //criando o estado para a classe. O estado corresponde a um objeto que contém os dados do componente que serão renderizados a partir da função render()\n      posts: [] //array de objetos em jsx: utilizamos : e não o sinal = para declarar um array\n\n    };\n\n    this.loadPosts = async () => {\n      const postsResponse = fetch('https://jsonplaceholder.typicode.com/posts'); // usando a fetch api nativa do navegador para fazer requisições\n\n      const [posts] = await Promise.all([postsResponse]); //retornando um array de promessas\n\n      const postsJson = await posts.json();\n      this.setState({\n        posts: postsJson\n      });\n    };\n  }\n\n  componentDidMount() {\n    //componente de ciclo de vida. Ele será executado uma vez após o componente ser montado na tela. É um lifecyle method de montagem.Pode ser utilizado para buscar dados de uma API\n    this.loadPosts();\n  }\n\n  render() {\n    //só podemos ter um componente root dentro da página com React. Para adicionar mais um componente, devemos colocá-lo dentro do root\n    //precisamos inserir um Key com uma propriedade única dentro do componente-pai quando estamos utilizando o método .map()\n    const {\n      posts\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"posts\",\n        children: posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"post-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: post.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: post.body\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 13\n            }, this)]\n          }, post.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["Component","App","state","posts","loadPosts","postsResponse","fetch","Promise","all","postsJson","json","setState","componentDidMount","render","map","post","title","body","id"],"sources":["/home/pi/Documents/Ially/alura/reactjs/react-initial/src/App.js"],"sourcesContent":["import './App.css';\nimport { Component } from 'react';\n\nclass App extends Component { //componente react. Para escrever um código JavaScript em JSX usamos um par de chaves {} e escrevemos o códgio dentro\n    //é possível criar um componente de estado sem utilizar o constructor\n  state = {  //criando o estado para a classe. O estado corresponde a um objeto que contém os dados do componente que serão renderizados a partir da função render()\n    posts: [] //array de objetos em jsx: utilizamos : e não o sinal = para declarar um array\n  };\n\ncomponentDidMount() { //componente de ciclo de vida. Ele será executado uma vez após o componente ser montado na tela. É um lifecyle method de montagem.Pode ser utilizado para buscar dados de uma API\n  this.loadPosts();\n}\n\nloadPosts = async () => {\n  const postsResponse = fetch('https://jsonplaceholder.typicode.com/posts'); // usando a fetch api nativa do navegador para fazer requisições\n  const [posts] = await Promise.all([postsResponse]);//retornando um array de promessas\n  const postsJson = await posts.json();\n  this.setState({ posts: postsJson });\n}\n\nrender() {\n//só podemos ter um componente root dentro da página com React. Para adicionar mais um componente, devemos colocá-lo dentro do root\n//precisamos inserir um Key com uma propriedade única dentro do componente-pai quando estamos utilizando o método .map()\n    const { posts } = this.state;\n\n    return (\n      <section className='container'>\n        <div className='posts'>\n        {posts.map(post => (\n          <div className='post'>\n          <div key={post.id} className= 'post-content'> \n            <h1>{post.title}</h1>\n            <p>{post.body}</p>\n          </div>\n        </div>\n        ))}\n      </div>\n      </section>\n    );\n  }\n} \n\nexport default App;\n"],"mappings":";AAAA,OAAO,WAAP;AACA,SAASA,SAAT,QAA0B,OAA1B;;;AAEA,MAAMC,GAAN,SAAkBD,SAAlB,CAA4B;EAAA;IAAA;IAAA,KAE1BE,KAF0B,GAElB;MAAG;MACTC,KAAK,EAAE,EADD,CACI;;IADJ,CAFkB;;IAAA,KAU5BC,SAV4B,GAUhB,YAAY;MACtB,MAAMC,aAAa,GAAGC,KAAK,CAAC,4CAAD,CAA3B,CADsB,CACqD;;MAC3E,MAAM,CAACH,KAAD,IAAU,MAAMI,OAAO,CAACC,GAAR,CAAY,CAACH,aAAD,CAAZ,CAAtB,CAFsB,CAE6B;;MACnD,MAAMI,SAAS,GAAG,MAAMN,KAAK,CAACO,IAAN,EAAxB;MACA,KAAKC,QAAL,CAAc;QAAER,KAAK,EAAEM;MAAT,CAAd;IACD,CAf2B;EAAA;;EAM5BG,iBAAiB,GAAG;IAAE;IACpB,KAAKR,SAAL;EACD;;EASDS,MAAM,GAAG;IACT;IACA;IACI,MAAM;MAAEV;IAAF,IAAY,KAAKD,KAAvB;IAEA,oBACE;MAAS,SAAS,EAAC,WAAnB;MAAA,uBACE;QAAK,SAAS,EAAC,OAAf;QAAA,UACCC,KAAK,CAACW,GAAN,CAAUC,IAAI,iBACb;UAAK,SAAS,EAAC,MAAf;UAAA,uBACA;YAAmB,SAAS,EAAE,cAA9B;YAAA,wBACE;cAAA,UAAKA,IAAI,CAACC;YAAV;cAAA;cAAA;cAAA;YAAA,QADF,eAEE;cAAA,UAAID,IAAI,CAACE;YAAT;cAAA;cAAA;cAAA;YAAA,QAFF;UAAA,GAAUF,IAAI,CAACG,EAAf;YAAA;YAAA;YAAA;UAAA;QADA;UAAA;UAAA;UAAA;QAAA,QADD;MADD;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADF;EAcD;;AApCyB;;AAuC5B,eAAejB,GAAf"},"metadata":{},"sourceType":"module"}